parameters:
  - name : current_sprint 
    type : string
  - name : minor
    type : string
  - name: artifact_name
    type: string
  - name: azure_subscription
    type: string
  - name: mfe
    type: string
  - name: version_number
    type: string
  - name: appname
    type: string

steps:
      - checkout: self
        path: s/${{ parameters.artifact_name }}
        
      - task: Npm@1
        displayName: 'npm i'
        inputs:
         command: custom
         workingDir: $(Build.SourcesDirectory)/
         verbose: false
         customCommand: 'i'

      - task: Npm@1
        displayName: 'Unit test coverage'
        inputs:
          command: custom
          workingDir: $(Build.SourcesDirectory)
          verbose: false
          customCommand: 'run test'
          
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: 'coverage/TESTS*.xml'
          mergeTestResults: true
          testRunTitle: 'Publish ${{ parameters.artifact_name }} test results'

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: 'coverage/cobertura-coverage.xml'
          reportDirectory: 'coverage'

      - task: Npm@1
        displayName: 'npm run build'
        inputs:
          command: custom
          workingDir: $(Build.SourcesDirectory)
          verbose: false
          customCommand: 'run build'

      - task: Veracode@3
        inputs:
          ConnectionDetailsSelection: 'Endpoint'
          AnalysisService: 'Veracode-service connection'
          veracodeAppProfile: '${{ parameters.appname }}'
          version: '${{ parameters.appname }}-build:$(Build.BuildNumber)'
          filepath: '$(Build.SourcesDirectory)/dist'
          sandboxName: 'functionapp_imaging_${{ parameters.artifact_name }}'
          createSandBox: true
          createProfile: true
          failBuildIfUploadAndScanBuildStepFails: true
          importResults: true
          failBuildOnPolicyFail: true
          maximumWaitTime: '360' 

      - task: PowerShell@2
        displayName: Set the name of the build (i.e. the Build.BuildNumber)
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Setting the name of the build to '$(buildName)'."
            Write-Host "##vso[build.updatebuildnumber]$(versioNnumber).$(buildName)"

      - task: PowerShell@2
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetType: 'inline'
          script: |
            $myDate=$(Get-Date -format yy)
            Write-Host "##vso[build.addbuildtag]${{ parameters.artifact_name }}"
            Write-Host "##vso[build.addbuildtag]artifact-published"
            Write-Host "##vso[build.addbuildtag]$(Build.BuildId)"
            write-host "##vso[build.addbuildtag]$(Build.BuildNumber)"
            Write-Host "##vso[task.setvariable variable=MyDate]$myDate"
       
      - task: Bash@3
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetType: 'inline'
          script: 'cp -r $(Build.SourcesDirectory)/dist $(Build.ArtifactStagingDirectory)/dist'

      - task: PublishBuildArtifacts@1
        displayName: Publish ${{ parameters.artifact_name }} Artifact
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          PathtoPublish: $(Build.ArtifactStagingDirectory)/dist
          ArtifactName: 'db-view-$(mfe)'
          publishLocation: 'Container'

      # - task: Veracode@3
      #   inputs:
      #     ConnectionDetailsSelection: 'Endpoint'
      #     AnalysisService: 'Veracode-service connection'
      #     veracodeAppProfile: '${{ parameters.appname }}'
      #     version: '${{ parameters.appname }}-build:$(Build.BuildNumber)'
      #     filepath: 'dist'
      #     sandboxName: 'functionapp_imaging_${{ parameters.artifact_name }}'
      #     createSandBox: true
      #     createProfile: true
      #     failBuildIfUploadAndScanBuildStepFails: true
      #     importResults: true
      #     failBuildOnPolicyFail: true
      #     maximumWaitTime: '360' 
      

          