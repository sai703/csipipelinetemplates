trigger: none

pool: vmss-agents-linux-nonprod-centralus

parameters:

- name: project_file_test
  type: string
  default: "**/*.csproj"

- name: build_configuration
  type: string
  default: Release

- name: reports_folder
  type: string
  default: $(Artifacts.Directory)

- name: test_flags
  type: string
  default: ""

- name: fail_if_coverage_empty
  type: boolean
  default: true

- name: line_coverage_threshold
  type: number 
  default: 80

- name: branch_coverage_threshold
  type: number
  default: 80

- name: enabled
  type: string
  default: true

steps:
# - task: UseDotNet@2
#   displayName: 'Version Upgrade'
#   inputs:
#     version: '6.x'
#     includePreviewVersions: true
- task: DotNetCoreCLI@2
  displayName: run tests
  inputs:
    command: "test"
    publishTestResults: false
    projects: ${{ parameters.project_file_test }}                  #"**/*.sln"
    arguments: '-c ${{ parameters.build_configuration }} --collect:"XPlat Code Coverage" -r ${{ parameters.reports_folder }} ${{ parameters.test_flags }}' 
  enabled: ${{ parameters.enabled }}

- task: reportgenerator@4
  displayName: merge code coverage
  inputs: 
    reports: "${{ parameters.reports_folder }}/**/coverage.cobertura.xml"
    targetdir: ${{ parameters.reports_folder }} 
    reporttypes: Cobertura
    verbosity: Verbose

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: "Cobertura"
    summaryFileLocation: "${{ parameters.reports_folder }}/Cobertura.xml"
    failIfCoverageEmpty: ${{ parameters.fail_if_coverage_empty }}

- task: BuildQualityChecks@8
  displayName: Check Line Coverage
  inputs:
    checkCoverage: true
    coverageFailOption: "fixed"
    coverageType: "lines"
    coverageThreshold: ${{ parameters.line_coverage_threshold }}
    runTitle: "lines"

- task: BuildQualityChecks@8
  displayName: Check Branch Coverage
  inputs:
    checkCoverage: false
    coverageFailOption: "fixed"
    coverageType: "branches"
    coverageThreshold: ${{ parameters.branch_coverage_threshold }}
    runTitle: "branches"